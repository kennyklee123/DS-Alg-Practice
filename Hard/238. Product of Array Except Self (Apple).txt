https://www.youtube.com/watch?v=khTiTSZ5QZY&t=171s

Approach 1 : Brute force
Time : O(n^2)
space : O(1)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int ans[] = new int[n];
        int a=1;
        for(int i=0;i<n;i++){
            a=1;
            for(int j=0;j<n;j++)
               if(i!=j) a*=nums[j];
            ans[i]=a;
        }
        return ans;
    }
}
Approach 2 : Input Array modification
Time : O(n)
space : O(1)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int a=1;
        int countO = 0;
        for(int i=0;i<n;i++)
            if(nums[i] == 0) countO++;
        if(countO ==0){
            for(int i=0;i<n;i++){
                a *= nums[i];
            }
            for(int i=0;i<n;i++)
                nums[i] = a / nums[i];
            return nums;
        }
        else if(countO == 1){
             for(int i=0;i<n;i++){
               if(nums[i]!=0) a *= nums[i];
            }
            for(int i=0;i<n;i++){
                if(nums[i] ==0) nums[i] = a;
                else nums[i] = 0;
            }
            return nums;
        }
        else return new int[n];
    }
}
Approach 3 : Using Left[] and Right[] to Store multiplications
Time : O(n)
space : O(n)

class Solution {
    
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int left[],right[],ans[];
        left = new int[n];
        right = new int[n];
        ans = new int[n];
        
        left[0] = 1;
        for(int i=1;i<n;i++)
            left[i] = left[i-1] * nums[i-1];
        
        right[n-1] = 1;
        for(int i=n-2;i>=0;i--)
            right[i] = right[i+1] * nums[i+1];
        
        for(int i=0;i<n;i++)
            ans[i] = left[i] * right[i];
        
        return ans;
    }
}
Approach 4: Using only Output array
Time : O(n)
space : O(1){
As per the question says output array doesnt count to the extra space,
however we are using output array to hold intermediate result which is actually not allowed if we look at this problem as O(1) perspective. So basically question says that apart from the output array , you are not allowed to use any other storage.

}

class Solution {
    
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        
        ans[0] = 1;
        for(int i=1;i<n;i++)
            ans[i] = ans[i-1] * nums[i-1];
        
        int R = 1;
        for(int i=n-1;i>=0;i--){
          ans[i] = R * ans[i];
          R *= nums[i];  
        }
        
        return ans;
    }
}
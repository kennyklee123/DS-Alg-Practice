class Solution {
    final int START = 0;
    final int END = 1;

    public int[][] insert(int[][] intervals, int[] newInterval) {
        
        
        List<int[]> result = new ArrayList<>(intervals.length + 1);

        int i=0;
        
        // Add all smaller and non-overlapping intervals.
        while (i < intervals.length && !doOverlap(intervals[i], newInterval) && intervals[i][START] < newInterval[START]) {
            result.add(intervals[i++]);
        }

        
        // Merge all overlapping intervals and then add the merged interval.
        while (i < intervals.length && doOverlap(intervals[i], newInterval)) {
            newInterval = merge(intervals[i++], newInterval);
        }
        result.add(newInterval);
        

        // Add intervals with start greater than end of new interval if any.
        while (i < intervals.length) {
            result.add(intervals[i++]);
        }

        return convertToMatrix(result);
    }

    
    private boolean doOverlap(int[] a, int[] b) {
        if (b[END] < a[START] || b[START] > a[END]) {
            return false;
        }
        return true;
    }

    
    private int[] merge(int[] a, int[] b) {
        int[] result = new int[2];
        result[START] = Math.min(a[START], b[START]);
        result[END] = Math.max(a[END], b[END]);
        return result;
    }

    
    
    
    private int[][] convertToMatrix(List<int[]> result) {
        int[][] matrix = new int[result.size()][2];
        int i=0;
        for (int[] r: result) {
            matrix[i++] = r;
        }
        return matrix;
    }
    }
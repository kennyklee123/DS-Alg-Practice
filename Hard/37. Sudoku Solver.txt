
class Solution {
    
    /*
    
    https://www.youtube.com/watch?v=JzONv5kaPJM
    we go row by row and at every spot, see if you can place a number
    Check to see if a # 1-9 can fit in that spot
    when you place a # you check if the col,row, and subgrid allow it to be there
    if you can not place a #1-9 there, just add in a .
    */
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0)
            return;
        solve(board);
    }
    
    public boolean solve(char[][] board){
        //if we can go through the whole solve method and reach the end, that means we solved the sudoku board without violating any of the games rules
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; //Put c for this cell
                            //if we did solve the board, return true
                            if(solve(board))
                                return true; //If it's the solution return true
                            //the placement of the current # between 1-9 did not return true, so we reset it to try a different # 1-9
                            else
                                board[i][j] = '.'; //Otherwise go back
                        }
                    }
                    
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] != '.' && board[i][col] == c) return false; //check row
            if(board[row][i] != '.' && board[row][i] == c) return false; //check column
            if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != '.' && 
     board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; //check 3*3 block
        }
        return true;
    }
}
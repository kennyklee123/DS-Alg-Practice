/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*

Input two nodes and a root, check if any are null

*/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
     if (root == null) 
         return null;
    //in a BST if the root val is bigger than both, than they are in hte left subtree
     if(root.val > p.val && root.val > q.val) 
        return lowestCommonAncestor(root.left, p, q);
        
     //if the node is less than booth values, they are in the right subtree
     else if (root.val < p.val && root.val < q.val) 
        return lowestCommonAncestor(root.right, p, q);
      //else if both nodes are not in the left, or not in the right
     //this is the ancestor
     else 
        return root;
    }
}
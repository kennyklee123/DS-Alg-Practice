/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    /*
    Avoid making a deep copy by donig the trwo if checks
    if  t1 is null we make that node t2, and either t2 has a value or is null as well
    same check for t2 is null
    if neither or null, we have to make a new ndoe and add their values
    then we call merge on left / right child
    */
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
       if (t1 == null) return t2;
        if (t2 == null) return t1;
        TreeNode result = new TreeNode(t1.val + t2.val);
        result.left = mergeTrees(t1.left, t2.left);
        result.right = mergeTrees(t1.right, t2.right);
        return result;
        
    }
    
    
}
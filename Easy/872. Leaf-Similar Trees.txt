/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     public boolean leafSimilar(TreeNode root1, TreeNode root2){
         StringBuilder root1Leaves = new StringBuilder(),root2Leaves=new StringBuilder();
         
         traverse(root1,root1Leaves);
         traverse(root2,root2Leaves);
         //if both strings are equal to each other they have the same leafs
         return root1Leaves.toString().equals(root2Leaves.toString());
	 }
         //DFS
	 public void traverse(TreeNode root,StringBuilder recordLeaves){
         //if root is null we are at a node that does not exist
		 if(root==null) 
             return;
         //check to see if the node we are at is leaf node
		 if(root.left==null && root.right==null)
             recordLeaves.append(root.val+"-");
         //now traverse left and right
		 traverse(root.left, recordLeaves);
		 traverse(root.right, recordLeaves);
	 }


}
/* SAME AS 
 public boolean leafSimilar(TreeNode root1, TreeNode root2) { 
		 return traverse(root1).equals(traverse(root2));
     }
	 String traverse(TreeNode root){
		 if(root==null) return "";
		 if(root.left==null && root.right==null) return root.val+"-";  
		 return traverse(root.left)+traverse(root.right);
     }
     */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2)
    {
        //dummy node that we can build our list on
        ListNode dummy = new ListNode(-1);//put the value of -1 into the fake "head"
        //we make another pointer to the dummy node so we can start building our list on it
	    ListNode head = dummy;
        
       //run while we still have nodes left to merge 
	    while (l1 != null || l2 != null)
        {
            if(l1.val < l2.val){
                dummy.next = l1;
                l1 = l1.next;
            }
            else{
                dummy.next = l2;
                l2 = l2.next;
            }
           dummy = dummy.next;
	    }
      
        //after we break out of the while loop, it is possible to have no lists left or a a single list left that needs to be merged
        
        //if l1 != null means that l2 is out of nodes, we just attach the rest of l1 to our list
        if(l1 != null){
            dummy.next = l1;
        }
        else
            dummy.next = l2;
        
    //this will be the beginning of the merged linked list
	return head.next;
    }
}

/*
^ above is the same as this
	ListNode fakeHead = new ListNode(0);
	ListNode current = fakeHead;

	while (l1 != null || l2 != null)
    {
        //this if statement covers both times where we have to set the next node in the list to l2
		if (l1 == null || (l2 != null && l1.val >= l2.val)) {
			current.next = l2;
			current = l2; 
			l2 = l2.next;
		} 
        //this else statement covers the cases when we set the next node to the one from list1
        //This covers if l2 == null or l1.val < l2.val 
        else {
			current.next = l1;
			current = l1;
			l1 = l1.next;
		}
	}
	return fakeHead.next;
            */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    
    public ListNode deleteDuplicates(ListNode head) {
        //check for the edge cases
           if(head == null || head.next == null) return head;
        
        //we need a pointer to the list
        ListNode list = head;
        //the idea is to itteratore over the list
        //and check if the next node has the same value at the node we are at now
        //if it does, we set the next node to the next next node so wehn we itterate again, we check that node's value with oru current node
        //if it doesn't have the same value, we set the current node to the next node
        
         while(list.next != null) 
         {
             if (list.val == list.next.val)
                 list.next = list.next.next;
             else 
                 list = list.next;
         }

         return head;
    }
}
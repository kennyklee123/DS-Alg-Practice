/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Time complexity: O(N) since we visit each node exactly once.
//Space complexity: O(N) to keep the output, and O(logN) for the recursion stack.
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums == null || nums.length == 0)
            return null;
        return recursiveBST(nums, 0 , nums.length-1);
    }
    private TreeNode recursiveBST(int[] nums, int left, int right){
        if(left>right)
            return null;
        int mid = left + (right-left)/2;
        TreeNode current = new TreeNode(nums[mid]);
        current.left = recursiveBST(nums, left, mid-1);
        current.right = recursiveBST(nums, mid+1, right);
        return current;
        
    }
}
    
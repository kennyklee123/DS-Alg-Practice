class Solution {
    public String longestCommonPrefix(String[] strs)
    {
        if (strs == null) 
            return null;
        if (strs.length == 0)
            return "";

        Arrays.sort(strs); 0(nlogn) 
        //IDEA: take the smallest string and the largest string and get the minmum length between the two
        char[] first = strs[0].toCharArray();
        char[] last  = strs[strs.length - 1].toCharArray();
        //i is used to hold the index of where the longest common prefix ends between the two strings
        int i = 0, len = Math.min(first.length, last.length);
        
        //We then itterate through this loop as long as we havent surpassed the length of the smallest string 
        //and that the characters of the two strings are equal to each other
        while (i < len && first[i] == last[i])
            i++;
        //we return the longest common prefix here which would be created using the smallest substring
        //the substring is from the first character up to the index of the last character in our common prefix
        return strs[0].substring(0, i);
        
    }
}
/*
    //we take the first word as our prefix and check it with the other words in the string
    //we check to see if the prefix is a substring of the word we are on
    //if it is not we reduce the length by 1 until the prefix is a substring of the word we are on
    //Or we hit 0 which means that the prefix will be empty as there is no common prefix
    if(strs.length == 0) 
        return "";
        //set the first word as our prefix
        String prefix = strs[0];
        for(int i =1; i<strs.length; i ++){
            //while we can not find the prefix at the beginning of the string we are on
            //we decrease the size of the prefix string, it reduces the # of chars by 1
            while(strs[i].indexOf(prefix) != 0){
                prefix = prefix.substring(0, prefix.length() -1);
            }
        }
        return prefix;
*/
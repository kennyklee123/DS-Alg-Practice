import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'play' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int play(List<List<Integer>> arr)
     {
        HashSet<Integer> used = new HashSet<Integer>();
        int tom =0;
        int jerry =0;
        ArrayList<Integer> maxValues = new ArrayList<Integer>();    
        boolean tomTurn = true;
        boolean jerryTurn = false;
        int tempMax = 0;
        //first i is column
        int row = arr.size();
        int column = arr.get(0).size();
        for(int i = 1; i< column; i++)
        {
            tempMax = arr.get(0).get(i);
            for(int j =1; j < row; j++)
            {
                if(arr.get(j).get(i) > tempMax)
                {
                    tempMax = arr.get(j).get(i);
                    maxValues.add(tempMax);

                }

            }
            
        }
        for(int i = 0; i < maxValues.size(); i++)
        {
            if(tomTurn == true)
            {
                tom += maxValues.get(i);
                tomTurn = false;
                jerryTurn = true;
            }
            else
            {
                jerry += maxValues.get(i);
                jerryTurn = false;
                tomTurn = true;
            }
        }
        int diff = tom - jerry;

        return diff;

    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrRows = Integer.parseInt(bufferedReader.readLine().trim());
        int arrColumns = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, arrRows).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.play(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        //check to see edge cases, if both are null they are the same, if only one is null they are not the same tree
        if(p == null && q == null)
            return true;
        if(p == null || q == null)
            return false;
        //call the helper function here
        return treeCheck(p, q);  
    }
    
    private boolean treeCheck(TreeNode p, TreeNode q){
        //if they are both null, the node's parents are a leaf node, so it passed the test so return true
        if(p == null && q == null)
            return true;
        //check if one is null and the other isnt return false,
        if(p == null || q == null)
            return false;
        //both are not false if they reach here so check values
        if(p.val != q.val)
            return false;
        //recurisvely call the left and right subtree
        return treeCheck(p.left, q.left) && treeCheck(p.right, q.right);
    }
}
class Solution {
    public List<String> letterCombinations(String digits) {
        /* 
        Many ways to do this, all have the same idea, you map through some sort of array or hashmap that contains the mapping of each digit on the phone, you can use DFS, backtracking, FIFO queue, etc
         My ALG: 
        We have an array that contains the mapping of each digit on the phone, EX: Digit 2 ->abc
        The linked list is key in this solution for a few reasons, first we loop until the length of the head node is == to the length of the digits
        This is done because when we use .remove() we process the head of the linked lsit, after processing that node we add it to the back
        The idea that since we take from the front and add to the back, all the nodes will be processed evenly, since they are all the same size
        We use the phoneMapping to get the letters coresponding to the digit we next have to process
        we process these mapped letters using a for loop, and we add every char that is mapped to that digit to the end of the current string the node we are processing has
        SO ex if we were processing "23" if the node we just removed from the linked list contains "a", digit 3 correesponds to d, e, f so we nodes ad, ae, af to the back of the linked list
        */
            LinkedList<String> res = new LinkedList<>();
        //check the edge cases
        String[] phoneMapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        if(digits == null || digits.length() == 0)
            return res;
        res.add("");
        //itterate while the resulting strings in my list do not equal to the length of the input given
        while(res.peek().length() != digits.length()){
            //grab head node
            String cur = res.remove();
            //get the mapping of the next digit we have to process
            //EX if the current string cur's length is 2, and the digit is length 3, we will look at the phoneMapping[digits.charAt(3)] which would be the next character we have to process
            String map = phoneMapping[digits.charAt(cur.length()) - '0'];
            
            //add the resulting chars that map to that digit
            for(char c : map.toCharArray()){
                res.addLast(cur+c);
            }
        }
        return res;


    }
}
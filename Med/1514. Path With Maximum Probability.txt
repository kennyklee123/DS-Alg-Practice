class Solution {
    /*
            Initialize all vertices probabilities as 0, except start, which is 1;
            Put all currently reachable vertices into a Priority Queue/heap, priority ordered by the corresponding current probability, REVERSELY
            Whenever popped out a vertex with currently highest probability, check if it is the end vertex
            If yes, we have already found the solution otherwise, traverse all its neighbors to update neighbors' probabilities if necessary
            Note: when forwarding one step, multiply the corresponding succProb value with the probaboility of current vertex.
            Repeat 2 & 3 to find the max probability for end; If can NOT, return 0.0d.
            */
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        
        Map<Integer, List<int[]>> graph = new HashMap<>();
        //make my graph here
        for (int i = 0; i < edges.length; ++i) {
            //get my two edges
            int a = edges[i][0], b = edges[i][1];
            graph.computeIfAbsent(a, l -> new ArrayList<>()).add(new int[]{b, i});    
            graph.computeIfAbsent(b, l -> new ArrayList<>()).add(new int[]{a, i});    
        }
        //we make a array of size n, and end < start i believe
        double[] prob = new double[n];
        //probabilty at start is always 1
        prob[start] = 1d;
        //use a PQ to hold the priorities
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.comparingDouble(i -> -prob[i]));
        pq.offer(start);
        //basically do dijstrakas now
        //idea use PQ to hold the top priorities, take the top prioritie, check if we are at end
        //if its not end we go throguh its neighbors and update the neighbor's probabiltiies
        while (!pq.isEmpty()) {
            //get current node
            //check to see if we are done
            int cur = pq.poll();
            if (cur == end) {
                return prob[end];
            }
            //get all of its neighbors
            for (int[] a : graph.getOrDefault(cur, Collections.emptyList())) {
                //we need to get its index
                int neighbor = a[0], index = a[1];
                if (prob[cur] * succProb[index] > prob[neighbor]) {
                    prob[neighbor] = prob[cur] * succProb[index];
                    pq.offer(neighbor);
                }
            }
        }
        return 0;
    }
    
}
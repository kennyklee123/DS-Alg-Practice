/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        //what if the input is null
        //ALGORITHM we use bfs since its hinted "top to bottom"
        //at every level we choose the right most node to add to our list
        //alg is bfs, we always add what is the last thing visible in our current level
        List<Integer> res = new ArrayList<Integer>();
        if(root ==null)
            return res;
        Queue<TreeNode> q  = new LinkedList<>();
        q.add(root);
        //while the q is not empty we run bfs
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i <size; i++)
            {
                TreeNode temp = q.poll();
                //check to see if the node we are on is the last node on its level, if so its the msot right node
                if(i == size -1)
                    res.add(temp.val);
                //add the children of the current level to be processed
                if(temp.left != null)
                    q.add(temp.left);
                if(temp.right != null)
                    q.add(temp.right);               
            }
            
        }
        return res;
        
    }
}
class Solution {
    /*
    idea is to start at the points touching the one of the two oceans, which is the first row/last row and the first col/last col
    we check to see if those points can reach the other ocean
    we use two arraylist to mark what points can be reached from each side of the ocean with the number "1"
    we check every cell in the 2d array to see what points can be reached by both oceans(meaning that point can be reached by both waters) 
    if there is a point that is = 1 in both the pacific and atlantic matrix, meaning that they can be reached by oceans, we add that point to our resulting array
    we do this on every cell
    
    */
    
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
           List<List<Integer>> cord=new ArrayList<>();
        if(matrix==null || matrix.length==0)
        {
            return cord;
        }
        int row=matrix.length;
        int col=matrix[0].length;
        
        int pacific[][]=new int[row][col];
        int atlantic[][]=new int[row][col];
        
        //dfs for fisrt row
        for(int i=0;i<col;i++)
        {
            dfs(matrix,0,i,pacific,Integer.MIN_VALUE);
        }
        // dfs for fisrt column
        for(int i=0;i<row;i++)
        {
            dfs(matrix,i,0,pacific,Integer.MIN_VALUE);
        }
        // dfs for last row
        for(int i=0;i<col;i++)
        {
            dfs(matrix,row-1,i,atlantic,Integer.MIN_VALUE);
        }
        //dfs for last column
        for(int i=0;i<row;i++)
        {
            dfs(matrix,i,col-1,atlantic,Integer.MIN_VALUE);
        }
        
        for(int i=0;i<pacific.length;i++)
        {
            for(int j=0;j<pacific[0].length;j++)
            {
                if(pacific[i][j]==1 && atlantic[i][j]==1)
                {
                    List<Integer> temp=new ArrayList<>();
                    temp.add(i);temp.add(j);
                    cord.add(temp);
                }
            }
        }
        return cord;
    }
    
    
    void dfs(int[][] matrix,int row,int col,int[][] temp,int prev)
    {
        //make sure the position is in bounds
        if(row<0 || col<0 || row>matrix.length-1 || col>matrix[0].length-1)
        {
            return;
        }
        //if the posittion we were last at is greater than us we dont want to go there since we are working backwards
        else if(prev>matrix[row][col])
        {
            return;
        }
        //check to see if we have went over this position already
        else if(temp[row][col]==1)
        {
            return;
        }
        
        temp[row][col]=1;
        dfs(matrix,row+1,col,temp,matrix[row][col]);
        dfs(matrix,row-1,col,temp,matrix[row][col]);
        dfs(matrix,row,col+1,temp,matrix[row][col]);
        dfs(matrix,row,col-1,temp,matrix[row][col]);
                

    }   
}
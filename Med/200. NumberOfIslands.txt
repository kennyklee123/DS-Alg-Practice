class Solution {
   
    public int numIslands(char[][] grid) {
        //idea is that we are going to us DFS to find all 1st connected with each other
        //when we find a cell that is = 1, we will call DFS on the cells near it and set that cell to 0
        //by doing this all the 1s that are connected to each other(an island) will be counted, as since they are set to 0 after they are visited
        //we will never have over lapping 1s in multiple islands
        //we will itterate through each cell of the matrix calling DFS if a cell is = 1
        //time complexity is 0(n)
        //Space complexity is O(n) due to the recursive stack having a worse case where the whole matrix is = 1
        
        
        //check edge cases to make sure the grid is not EX a 0 by 0
        if(grid == null || grid.length == 0)
            return 0;
        //this var holds our total # of islands
		int res = 0;
        //loop throguh each cell of teh matrix
		for(int i=0;i<h;i++){
			for(int j=0;j<l;j++){
			    // visited all ones in the grid
				// and call DFS
				// DFS method, marks all the 1's connected to it as visited.
				// that means we have visited a island, so, increment count.
				if(grid[i][j] == '1'){
					DFS(grid, i, j);
					res++;
				}
			}
		}
		// return result
		return res;

    }
    public static void DFS(char[][] grid, int row, int col)
    {
		int h = grid.length;
		int l = grid[0].length;
		// if row and col are not in range 
		// or it is not 1 , then return
		if(row<0 || col<0 || row>=h || col>=l || grid[row][col]!='1')
			return ;
		// make visited sqaure as 0
		grid[row][col] = '0';
		// visited all 1's that are connected
		DFS(grid, row, col-1);     // left
		DFS(grid, row, col+1);   // right
		DFS(grid, row+1, col);   // down
		DFS(grid, row-1, col);    // up
	}
    
}
 public static void DFS(char[][] grid, int row, int col){
		int h = grid.length;
		int l = grid[0].length;
		// if row and col are not in range 
		// or it is not 1 , then return
		if(row<0 || col<0 || row>=h || col>=l || grid[row][col]!='1')
			return ;
		// make visited sqaure as 0
		grid[row][col] = '0';
		// visited all 1's that are connected
		DFS(grid, row, col-1);     // left
		DFS(grid, row, col+1);   // right
		DFS(grid, row+1, col);   // down
		DFS(grid, row-1, col);    // up
	}
    public int numIslands(char[][] grid) {
        int h = grid.length;
		if(h == 0) return 0;
		int l = grid[0].length;
		int res = 0;
		for(int i=0;i<h;i++){
			for(int j=0;j<l;j++){
			    // visited all ones in the grid
				// and call DFS
				// DFS method, marks all the 1's connected to it as visited.
				// that means we have visited a island, so, increment count.
				if(grid[i][j] == '1'){
					DFS(grid, i, j);
					res++;
				}
			}
		}
		// return result
		return res;
    }

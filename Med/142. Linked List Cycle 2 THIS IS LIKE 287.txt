/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head)
    {
         ListNode slow = head, fast = head;
        if(head == null){
            return null;
        }
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast){
                break;
            }
        }
        //indicates that there is no cycle with this for loop
        if(fast == null || fast.next == null){
            return null;
        }
        //reset the slow to the front
        slow = head;
        //move everything by 1 until our slow and our fast are the same and then return our value fast
        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }
        return fast;
    }
}
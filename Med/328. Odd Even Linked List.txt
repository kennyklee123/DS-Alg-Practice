/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
         if(head == null || head.next == null){
            return head;
        }
        ListNode odd = head;
        ListNode even = head.next;
        ListNode even_head = head.next;
        //even or even.next will become null first
        
        while(even != null && even.next != null){
            //we do .next.next to skip to the next odd or even
            //EX 1 2 3 4 5 , if odd is at 1, its next node is 3 which .next.next
            odd.next = odd.next.next;
            even.next = even.next.next;
            //process the next node in our last
            odd = odd.next;
            even = even.next;
        }
        //even ends first so we attach the event list to our odd lost
        odd.next = even_head;
        return head;
    }
}
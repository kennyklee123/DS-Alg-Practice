/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        //edge case
        if(root == null)
            return 0;
        //initalize queue here
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        int totalSum = 0;
        //loop using bfs until we itterated over the whole tree
        //after itterating through the while loop, sum will be set to the sum of the last level
        while(!q.isEmpty()){
            int size = q.size();
            totalSum = 0; // reset sum at every level
            //only itterate this  level of the tree
            for(int i = 0; i <size; i++){
                TreeNode temp = q.poll();
                //we add to our sum of the current level
                totalSum += temp.val;
                //we add the nodes of the next levevl
                if(temp.left != null)
                    q.add(temp.left);
                if(temp.right != null)
                    q.add(temp.right);      
            }
        }
        return totalSum;          
    }
}
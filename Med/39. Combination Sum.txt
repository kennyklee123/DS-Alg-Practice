class Solution {
    /*
    Backtrack
    we use backtracking and start at index 0, and remaining which starts at target
    if our current remaining value <0, we just return as we ill not find a combination that = target
    if remaining ==0, whatever is in our current arraylist is a combination for target
    else
    we itterate from whatever our pointer to the candidates array is at, though we do not i by 1 when we do a recursive call
    as we can reuse elements ]
    EX candidates is [2,3,5] target is 8 yoiu can have output of 2,2,2,2
    */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        generate(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }
    
    public static void generate(List<List<Integer>> res, List<Integer> curr, int[] candidates, int remaining, int start){
        if(remaining == 0){
            res.add(new ArrayList<>(curr));
            return;
        }
        else if(remaining < 0)
            return;
        else{
            for(int i = start; i < candidates.length; i++){
            curr.add(candidates[i]);
            generate(res, curr, candidates, remaining - candidates[i], i);
            curr.remove(curr.size() -1); 
            }
        }
    }
}



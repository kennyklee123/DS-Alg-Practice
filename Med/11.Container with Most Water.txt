class Solution {
    /*
    
    The intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained.
    We take two pointers, one at the beginning and one at the end of the array constituting the length of the lines.
    Futher, we maintain a variable maxarea to store the maximum area obtained till now.
    At every step, we find out the area formed between them, update maxarea and move the pointer pointing to the shorter line towards the other end by one step.
    area is length x width, where length is shortest height and width is right-left
    
    */
   public int maxArea(int[] heights) {
        int maxArea = 0;
        
        int left = 0;
        int right = heights.length - 1;
        
        int maxHeight = 0;
        
        while (left < right) {
            // because the length is always decreasing
            // we only need to consider a pair if its height
            // is greater than any pair's height we've used so far
            if (heights[left] > maxHeight && heights[right] > maxHeight) {
                //the new maxheight is the min of the maxheights because it is possible to find something to replace the smaller max height, EX 8,6 but then if we found 8,7 thats bigger
                maxHeight = Math.min(heights[left], heights[right]);
                //area is the min hegiht * right-left which is how much room we got
                maxArea = Math.max(maxArea, maxHeight * (right - left));
            }
            
            // move pointers
            if (heights[left] == heights[right]) {
                left ++;
                right --;
            }
            //always trying to icnrease the hegihts to find the max possible area
            else if (heights[left] < heights[right]) {
                left ++;
            } else {
                right --;
            }
        }
        
        return maxArea;
   }
}
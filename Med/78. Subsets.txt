class Solution {
   public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }
    /*
    https://www.youtube.com/watch?v=LiuEfq37hqc
    ALG: Backtracking
    Our Choice: the numbers in the array
    Our Constraints: can not contain duplicate sets
    Our Goal: find all distinct subsets, of sizes 1 to nums.length
    we want to simulate adding a number and not adding a number at the index we are currently on
    */
    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
        //add an arraylist for every recursive call that represents that current set because we will be modifyimh templist which is our current list
        list.add(new ArrayList<>(tempList));
        
        //we itterate over the numbers in our current search space
        for(int i = start; i < nums.length; i++){
            //add the number and recurisvely call it
            tempList.add(nums[i]);
            //since we just added a number to our list, we move the index by 1
            backtrack(list, tempList, nums, i + 1);
            //remove that number to backtrack 
            //we do temp.size because need to remove the last integer we just added
            tempList.remove(tempList.size() - 1);
        }
    }
}
/*
For all those who are facing difficulty in understanding the solution, this will definitely save your day.
Let's take an example -> nums = [1,2,3]

first of all, we created current = [ ]
Now, we are going to create a copy of current and add it to our subsets Arraylist.
So far, we have subsets = [[ ]] 

Now, we insert the nums[i] i.e., nums[0] in current. Current become -> [1]
Now, we make a recursion call with index = 1 and current = [1].

Now, we  add current in subsets. Subsets = [[ ], [1]] (created a copy of current and added it to subset)
Add nums[i] to current where index = 1. Current = [1,2]
Recursion call -> index = 2, current = [1, 2].

Add current to subsets. Subsets = [[ ], [1], [1,2]]
Add nums[i] to current where index = 2.
Recursion call -> index = 3, current = [1,2,3]

Add current to subset. Subsets = [[ ], [1],[1,2],[1,2,3]]
Now, for loop won't execute because index > nums.length().
So, it will return now. 

Now, we come to statement current.remove(current.size() - 1).
We now get, current = [1,2]. i = 2 here. Now, we come to next iteration of for loop, i becomes 3 but 3 < nums.length(). 
So, it will again return.

Now, we come to statement current.remove(current.size() - 1) again.
We now get, current = [1], i = 1 here. Now, in next loop iteration, i = 2.
We add nums[i] to current. i = 2. Current = [1,3]
Recursion Call -> current = [1,3], index = 3

Insert current to subset. Subset = [[ ], [1], [1,2], [1,2,3], [1,3]]
We now try to run the loop but i = 3 and it is not less than nums.length(). 
So, we return.

Now, we come back to statement current.remove(current.size() - 1).


And in the same fashion, [1] is also removed. After 1 is removed, we get [ ] and we insert 2 in it. then we insert [2] in subsets. Then we insert [2,3]. Then we remove 3 and 2. Then we insert [3]. And we are done.

We finally get subset = [[ ], [1], [1,2], [1,2,3], [1,3], [2], [2,3], [3]] ------> ANSWER. Return it. 
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //initailizing queue and list here
        List<List<Integer>> orderList = new LinkedList<List<Integer>>();
        //edge case here is the root is nul
        if(root == null)
            return orderList;
        LinkedList<TreeNode> qList = new LinkedList<TreeNode>();
        int remain = 0;
        qList.add(root);//add the root into the queue
        
        //initalize while loop here to do bfs, we continue to loop until the queue is empty meaning there are no nodes left to process
        while(!qList.isEmpty()){
            remain = qList.size(); //get the size of the queue to process
            //initialize list here for this level
            LinkedList<Integer> subList = new LinkedList<Integer>();
             //add the current level's nodes into the sublist, while adding the next-level nodes to the queue
            for(int i = 0; i<remain; i++){
                TreeNode current = qList.removeFirst();//take the first node of the queue
                //i check if the current node we are looking at his children, if so add them to the queue to be processed later on
                if(current.left != null)
                    qList.add(current.left);
                if(current.right != null)
                    qList.add(current.right);
                 subList.add(current.val); //add the current node to the subList
            }
            //add the sublist to our overall list, the sublist is an entry of a single level in our tree
            orderList.add(subList);  
        }
        return orderList;
    }        
}          
        
        